plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

/**
 * 1.测试sourceSet掌握情况
 * 2.flavor ,buildType 组合掌握情况
 */


android {
    compileSdk 31

    defaultConfig {
        applicationId "com.kuaidao.butildconfigsample"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        missingDimensionStrategy 'minApi', 'minApi18', 'minApi23'
    }

    sourceSets {
        minApi23PayDebug {
            java.srcDirs = ['src/minApi23PayDebug/other1']
        }
    }
        signingConfigs {
        releaseConfig {
            storeFile file("../jks/reworld.jks")
            storePassword "re123456"
            keyAlias "key0"
            keyPassword "re123456"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
        debug {
            minifyEnabled false
            applicationIdSuffix ".debug"
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        staging {
            initWith debug
            manifestPlaceholders = [hostName:"internal.example.com"]
            applicationIdSuffix ".debugStaging"
            // Specifies a sorted list of fallback build types that the
            // plugin should try to use when a dependency does not include a
            // "staging" build type. You may specify as many fallbacks as you
            // like, and the plugin selects the first build type that's
            // available in the dependency.
            matchingFallbacks =['lib1','debug']
        }

    }

    flavorDimensions "version"

    productFlavors {
        free {
            dimension "version"
            applicationIdSuffix ".demo"
            versionNameSuffix "-demo"
        }
        pay {
            dimension "version"
            applicationIdSuffix ".full"
            versionNameSuffix "-full"
            matchingFallbacks = ['free', 'minApi24']

        }

    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        if (names.contains("minApi21") ) {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
            println "$names"
        }

    }



    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    viewBinding {
        enabled = true
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
//    implementation project(path: ':mylibrary')
    implementation project(path: ':mylibrary2')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

}